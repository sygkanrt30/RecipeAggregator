version: '3.8'

services:
  zookeeper:
    image: bitnami/zookeeper:3.9
    ports:
      - "2181:2181"
    environment:
      ALLOW_ANONYMOUS_LOGIN: "yes"
    healthcheck:
      test: [ "CMD", "zkServer.sh", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - general-network

  kafka:
    image: bitnami/kafka:3.6
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,PLAINTEXT_HOST://:29092
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092" ]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - general-network

  db:
    image: postgres:17.5
    container_name: RecipeAggregatorDb
    restart: always
    ports:
      - "5435:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 5435
      POSTGRES_DB: recipe_service
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    networks:
      - db-network
      - general-network

  elasticsearch:
    image: elasticsearch:8.9.0
    container_name: elasticsearch-recipe-service
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - cluster.routing.allocation.disk.threshold_enabled=false
      - bootstrap.memory_lock=true
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    healthcheck:
      test: [ "CMD-SHELL", "curl -s -f http://localhost:9200/_cluster/health | grep -q '\"status\":\"\\(green\\|yellow\\)\"' || exit 1" ]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 90s
    networks:
      - general-network

  eureka-server:
    image: eureka-server:latest
    container_name: eureka-server
    ports:
      - "8761:8761"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - general-network

  recipe-service-api:
    image: recipe-service_api:latest
    container_name: recipe-service
    restart: always
    build:
      context: .
      dockerfile: recipe-service-api/Dockerfile
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      eureka-server:
        condition: service_healthy
    ports:
      - "8088:8088"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/recipe_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 5435
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - db-network
      - general-network

  parser-service-api:
    image: parser-service_api:latest
    container_name: parser-service
    restart: always
    build:
      context: .
      dockerfile: parser-service-api/Dockerfile
    depends_on:
      eureka-server:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8081:8081"
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    networks:
      - general-network

  search-service-api:
    image: search-service-api:latest
    container_name: search-service
    restart: always
    build:
      context: .
      dockerfile: search_service_api/Dockerfile
    depends_on:
      eureka-server:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      db:
        condition: service_healthy
    ports:
      - "8087:8087"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/recipe_service
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 5435
      SPRING_ELASTICSEARCH_URIS: http://elasticsearch:9200
      SPRING_ELASTICSEARCH_CONNECTION_TIMEOUT: 30000
      SPRING_ELASTICSEARCH_SOCKET_TIMEOUT: 60000
      ELASTICSEARCH_HOST_AND_PORT: elasticsearch:9200
      SPRING_DATA_ELASTICSEARCH_AUTO_CREATE_INDEX: "false"
      SPRING_DATA_ELASTICSEARCH_REPOSITORIES_ENABLED: "true"
    networks:
      - db-network
      - general-network

  gateway-service:
    image: gateway-service:latest
    container_name: gateway-service
    restart: always
    build:
      context: .
      dockerfile: gateway-service/Dockerfile
    ports:
      - "8082:8082"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://eureka-server:8761/eureka
      - GATEWAY_SECRET=myGatewaySecret4145132412
    depends_on:
      eureka-server:
        condition: service_healthy
    networks:
      - general-network

networks:
  db-network:
    driver: bridge
  general-network:
    driver: bridge

volumes:
  postgres_data:
  elasticsearch_data: